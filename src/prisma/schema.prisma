// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node ../../node_modules/prisma-nestjs-graphql"
  output                 = "../../src/@generated"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Log {
  id              String        @id @default(uuid())
  section         SystemSection @relation(fields: [systemSectionId], references: [id])
  requestBody     String
  requestType     String
  deviceType      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  systemSectionId String
}

model SystemSection {
  id        String   @id @default(uuid())
  name      String
  logs      Log[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(uuid())
  /// @FieldType({ name: 'Scalars.GraphQLEmailAddress', from: 'graphql-scalars', input: true })
  email          String    @unique
  password       String
  /// @HideField({ output: false, input: true })
  lastLogin      DateTime?
  /// @HideField({ output: false, input: true })
  profilePicture String?
  /// @HideField({ output: false, input: true })
  createdAt      DateTime  @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt      DateTime  @updatedAt
  employee       Employee?
}

model Employee {
  /// @HideField({ match: 'EmployeeCreate*Input' })
  id                            String                          @id @default(uuid())
  type                          EmployeesTypes
  documents                     Document[]
  user                          User                            @relation(fields: [userId], references: [id])
  personalData                  PersonalData                    @relation(fields: [personalDataId], references: [id])
  /// @HideField({ output: false, input: true })
  createdAt                     DateTime                        @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt                     DateTime                        @updatedAt
  loan                          Loan[]
  userId                        String                          @unique()
  loanPayment                   LoanPayment[]
  commissionPayment             CommissionPayment[]
  contractEmployee              Contract[]                      @relation("Contract_employee")
  contractLoanLead              Contract[]                      @relation("Contract_loanLean")
  expenses                      Expenses[]
  personalDataId                String
  amountGivedIncreased          Boolean                         @default(false)
  comments                      Comment[]
  routes                        Route[]
  borrower                      Borrower[]
  leadPaymentsReceivedLead      LeadPaymentReceived[]           @relation("LeadPaymentsReceived_Lead")
  leadPaymentReceivedAgent      LeadPaymentReceived[]           @relation("LeadPaymentsReceived_Agent")
  comissionPaymentConfiguration ComissionPaymentConfiguration[]
}

model Document {
  id   String       @id @default(uuid())
  type DocumentType

  borrower       Borrower?     @relation(fields: [borrowerId], references: [id])
  borrowerId     String?
  employee       Employee?     @relation(fields: [employeeId], references: [id])
  contract       Contract?     @relation(fields: [contractId], references: [id])
  contractId     String?
  employeeId     String?
  PersonalData   PersonalData? @relation(fields: [personalDataId], references: [id])
  personalDataId String?
  Loan           Loan?         @relation(fields: [loanId], references: [id])
  loanId         String?
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  logo      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalData {
  id        String     @id @default(uuid())
  fullName  String
  firstName String
  lastName  String
  documents Document[]
  phones    Phone[]
  addresses Address[]
  /// @HideField({ output: false, input: true })
  createdAt DateTime   @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt DateTime   @updatedAt
  employee  Employee[]
  borrower  Borrower[]
  Loan      Loan?      @relation(fields: [loanId], references: [id])
  loanId    String?
}

model State {
  id             String         @id @default(uuid())
  name           String
  municipalities Municipality[]
}

model Municipality {
  id       String     @id @default(uuid())
  name     String
  state    State      @relation(fields: [stateId], references: [id])
  stateId  String
  location Location[]
}

model Address {
  /// @HideField({ match: 'BorrowerCreate*Input' })
  id             String        @id @default(uuid())
  street         String
  exteriorNumber String?
  interiorNumber String
  postalCode     String
  references     String?
  location       Location      @relation(fields: [locationId], references: [id])
  locationId     String
  local          Local?        @relation(fields: [localId], references: [id])
  localId        String?
  personalData   PersonalData? @relation(fields: [personalDataId], references: [id])
  personalDataId String?
}

model Location {
  /// @HideField({ match: 'BorrowerCreate*Input' })
  id             String       @id @default(uuid())
  name           String       @unique
  address        Address[]
  municipality   Municipality @relation(fields: [municipalityId], references: [id])
  municipalityId String
  route          Route?       @relation(fields: [routeId], references: [id])
  routeId        String?
}

//Prestatario
model Borrower {
  /// @HideField({ match: 'BorrowerCreate*Input' })
  id                String       @id @default(uuid())
  /// @FieldType({ name: 'Scalars.GraphQLEmailAddress', from: 'graphql-scalars', input: true })
  email             String?      @unique
  documents         Document[]
  personalData      PersonalData @relation(fields: [personalDataId], references: [id])
  //reference Borrower?  @relation("BorrowerToBorrower", fields: [borrowerId], references: [id])
  /// @HideField({ output: false, input: true })
  createdAt         DateTime     @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt         DateTime     @updatedAt
  contract          Contract[]
  loanFinishedCount Int          @default(0)
  //borrowerId String?
  //Borrower   Borrower[] @relation("BorrowerToBorrower")
  local             Local[]
  employee          Employee?    @relation(fields: [employeeId], references: [id])
  personalDataId    String
  employeeId        String?
}

model Local {
  /// @HideField({ match: 'LocalCreate*Input' })
  id        String    @id @default(uuid())
  name      String
  addresses Address[]

  /// @HideField({ output: false, input:true })
  createdAt  DateTime @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt  DateTime @updatedAt
  borrower   Borrower @relation(fields: [borrowerId], references: [id])
  borrowerId String
}

model Phone {
  /// @HideField({ match: 'PhoneCreate*Input' })
  id             String        @id @default(uuid())
  number         String        @unique
  /// @HideField({ output: false, input: true })
  borrowerId     String?
  /// @HideField({ output: false, input: true })
  createdAt      DateTime      @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt      DateTime      @updatedAt
  personalDataId String?
  personalData   PersonalData? @relation(fields: [personalDataId], references: [id])
}

model ContractType {
  /// @HideField({ match: 'ContractTypeCreate*Input' })
  id            String     @id @default(uuid())
  /// @Validator.MinLength(3)
  name          String
  monthDuration Int
  amount        Decimal    @db.Money
  maxRate       Decimal
  /// @HideField({ output: false, input: true })
  createdAt     DateTime   @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt     DateTime?  @updatedAt
  contract      Contract[]
}

// El contrato se firma una vez al AÃ±o por un maximo de 60k. Y se hacen disposiciones de dinero Cada X tiempo. Cuando loquidas el prestamo actual
// El contrato es para darte una linea de credito. Y cada que quieras un prestamo, debes solicitar una disposicion de dinero. Esta disposicion de dinero es  por X semanas
// Un contrato puede tener N disposiciones de dinero. (Pero no al mismo tiempo)
// cada prestamo, tiene N pagares (estos se llenan manualmente. Solo se requiere la base del archivo)

model Loantype {
  id                            String                          @id @default(uuid())
  name                          String
  weekDuration                  Int
  rate                          Float //percentege
  weeksToRenew                  Int
  overdueRate                   Float
  initialAmount                 Float                           @default(3000)
  maximunAmount                 Float                           @default(5000)
  amountToIncrease              Float                           @default(500)
  increaseEveryNLoans           Int                             @default(2) //each 2 loan can increase the max amount of the loan
  leadsOnly                     Boolean                         @default(false)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  loan                          Loan[]
  comissionPaymentConfiguration ComissionPaymentConfiguration[]
  routes                        Route[]
}

model Route {
  id         String     @id @default(uuid())
  name       String
  employees  Employee[]
  loantypes  Loantype[]
  localities Location[]
}

model FalcoCompensatoryPayment {
  id                    String               @id @default(uuid())
  amount                Decimal              @db.Money
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  leadPaymentReceived   LeadPaymentReceived? @relation(fields: [leadPaymentReceivedId], references: [id])
  leadPaymentReceivedId String?
}

model LeadPaymentReceived {
  id                        String                     @id @default(uuid())
  type                      LeadPaymentTypes
  expectedAmount            Decimal                    @db.Money
  paidAmount                Decimal                    @db.Money
  falco                     Decimal                    @db.Money
  pendingFalcoAmount        Decimal                    @db.Money
  falcoCompensatoryPayments FalcoCompensatoryPayment[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  leadId                    String
  agentId                   String
  payments                  LoanPayment[]
  agent                     Employee                   @relation("LeadPaymentsReceived_Agent", fields: [agentId], references: [id])
  lead                      Employee                   @relation("LeadPaymentsReceived_Lead", fields: [leadId], references: [id])
}

model Contract {
  /// @HideField({ match: 'ContractCreate*Input' })
  id             String       @id @default(uuid())
  borrower       Borrower     @relation(fields: [borrowerId], references: [id])
  borrowerId     String
  documents      Document[]
  /// @HideField({ output: false, input: true })
  loans          Loan[]
  /// @HideField({ output: false, input: true })
  createdAt      DateTime     @default(now())
  /// @HideField({ output: false, input: true })
  dueDate        DateTime
  signDate       DateTime
  /// @HideField({ output: false, input: true })
  updatedAt      DateTime     @updatedAt
  contractType   ContractType @relation(fields: [contractTypeId], references: [id])
  contractTypeId String
  loanLeadId     String?
  employeeId     String
  loanLead       Employee?    @relation("Contract_loanLean", fields: [loanLeadId], references: [id])
  employee       Employee     @relation("Contract_employee", fields: [employeeId], references: [id])
}

model Loan {
  /// @HideField({ match: 'LoanCreateInput' })
  id                      String         @id @default(uuid())
  /// @HideField({ output: false, input: true })
  status                  LoanState
  /// @HideField({ output: false, input: true })
  payments                LoanPayment[]
  /// @HideField({ match: 'LoanCreateInput' })
  weeklyPaymentAmount     Decimal        @db.Money
  previousAmountGived     Decimal?       @db.Money
  amountGived             Decimal        @default(0) @db.Money
  amountToPay             Decimal        @default(0) @db.Money
  /// @HideField({ output: false, input: true })
  paidAmount              Decimal        @default(0) @db.Money
  /// @HideField({ output: false, input: true })
  pendingAmount           Decimal        @default(0) @db.Money
  /// @HideField({ output: false, input: true })
  renovationProfitAmount  Decimal        @default(0) @db.Money
  /// @HideField({ output: false, input: true })
  renovationPendingAmount Decimal        @default(0) @db.Money
  /// @HideField({ output: false, input: true })
  baseProfitAmount        Decimal        @default(0) @db.Money
  /// @HideField({ output: false, input: true })
  totalProfitAmount       Decimal        @default(0) @db.Money
  loanType                Loantype       @relation(fields: [loantypeId], references: [id])
  signDate                DateTime       @default(now())
  finishedDate            DateTime?
  avals                   PersonalData[]
  documents               Document[]

  /// @HideField({ output: false, input: true })
  createdAt         DateTime            @default(now())
  employee          Employee            @relation(fields: [employeeId], references: [id])
  updatedAt         DateTime            @updatedAt
  contract          Contract            @relation(fields: [contractId], references: [id])
  contractId        String
  loantypeId        String
  employeeId        String
  paymentSchedule   PaymentSchedule[]
  commissionPayment CommissionPayment[]
  renovatedFromId   String?
}

model LoanPayment {
  id                    String               @id @default(uuid())
  amount                Decimal              @db.Money
  profitAmount          Decimal              @db.Money
  returnToCapital       Decimal              @db.Money
  date                  DateTime
  percentage            Decimal              @db.Decimal(100, 9)
  comments              Comment[]
  /// @HideField({ output: false, input: true })
  createdAt             DateTime             @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt             DateTime             @updatedAt
  paymentSchedules      PaymentSchedule[]
  loan                  Loan                 @relation(fields: [loanId], references: [id])
  loanId                String
  employee              Employee             @relation(fields: [employeeId], references: [id])
  employeeId            String
  leadPaymentReceived   LeadPaymentReceived? @relation(fields: [leadPaymentReceivedId], references: [id])
  leadPaymentReceivedId String?
}

model Comment {
  id            String      @id @default(uuid())
  text          String
  /// @HideField({ output: false, input: true })
  createdAt     DateTime    @default(now())
  /// @HideField({ output: false, input: true })
  createdBy     Employee    @relation(fields: [employeeId], references: [id])
  createdById   String
  payment       LoanPayment @relation(fields: [loanPaymentId], references: [id])
  employeeId    String
  loanPaymentId String
}

model ComissionPaymentConfiguration {
  /// @HideField({ match: 'PaymentScheduleCreate*Input' })
  id                 String             @id @default(uuid())
  employeeType       EmployeesTypes
  loantypeId         String
  commissionGoalType CommissionGoalType
  commissionType     CommissionType
  amount             Decimal
  loanType           Loantype?          @relation(fields: [loantypeId], references: [id])
  leadId             Employee?          @relation(fields: [employeeId], references: [id])
  employeeId         String? //When employee is is setter, this is to overwrite the default loan configuration
}

model CommissionPayment {
  /// @HideField({ match: 'PaymentScheduleCreate*Input' })
  id                String                  @id @default(uuid())
  amount            Decimal                 @db.Money
  paymentSchedule   PaymentSchedule         @relation(fields: [paymentScheduleId], references: [id])
  loan              Loan?                   @relation(fields: [loanId], references: [id])
  employee          Employee                @relation(fields: [employeeId], references: [id])
  loanId            String?
  paymentScheduleId String
  employeeId        String
  status            CommissionPaymentStatus
}

model PaymentSchedule {
  /// @HideField({ match: 'PaymentScheduleCreate*Input' })
  id                String              @id @default(uuid())
  numeration        Int
  amountToPay       Decimal             @db.Money
  paidAmount        Decimal             @db.Money
  returnToCapital   Decimal             @default(0) @db.Money
  profit            Decimal             @default(0) @db.Money
  status            PaymentState
  delayed           Boolean             @default(false)
  dueDate           DateTime
  details           String?
  /// @HideField({ output: false, input: true })
  createdAt         DateTime            @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt         DateTime            @updatedAt
  loan              Loan                @relation(fields: [loanId], references: [id])
  loanId            String
  loanPayments      LoanPayment[]
  /// @HideField({ output: false, input: true })
  commissionPayment CommissionPayment[]
}

model Expenses {
  /// @HideField({ match: 'ExpensesScheduleCreate*Input' })
  id          String       @id @default(uuid())
  amountToPay Decimal      @db.Money
  status      PaymentState
  dueDate     DateTime
  payedAt     DateTime
  employee    Employee     @relation(fields: [employeeId], references: [id])
  /// @HideField({ output: false, input: true })
  createdAt   DateTime     @default(now())
  /// @HideField({ output: false, input: true })
  updatedAt   DateTime     @updatedAt
  userId      String?
  employeeId  String
}

enum ExpensesType {
  LODGMENT
  STATIONERY
  GASOLINE
  MECHANIC
  SALARY
  FOOD
}

enum LeadPaymentTypes {
  PENDING_MONEY
  COMPENSATORY_PENDING_MONEY
}

enum CommissionPaymentStatus {
  PAID_OUT
  PENDING
  REJECTED
}

enum LoanState {
  REQUESTED
  IN_REVIEW
  APPROVED
  REJECTED
  PAID_OUT
  POSTPONED
}

enum PaymentState {
  PENDING
  PAID_OUT
  PARTIALLY_PAID
}

enum EmployeesTypes {
  LIAISON_EXECUTIVE
  LOAN_LEAD
}

enum DocumentType {
  DNI
  NSS
  RFC
  SHOP_PHOTO
  BANC_ACCOUNT
  ADDRESS_PROFF
  CREDIT_BUREAU
  DRIVER_LICENCE
  JOB_APPLICATION
  CONTRACT_EVIDENCE
  LETTER_NO_CRIMINAL_RECORD
}

enum PrintableFormat {
  CONTRACT
  MONEY_REQUEST
  COLLECTION_LIST
  RESPONSIVE_LETTER
  PROMISSORY_NOTES
  DISPOSAL_ORDER
}

enum CommissionGoalType {
  NEW_LOAN
  PAYMENT_RECEIVED
}

enum CommissionType {
  FIXED_AMOUNT
  PERCENTAGE
}
