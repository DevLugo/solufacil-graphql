# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  password: String!
  lastLogin: DateTime
  profilePicture: String
  createdAt: DateTime!
  updatedAt: DateTime!
  employee: Employee
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Phone {
  id: ID!
  number: String!
  borrowerId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  avalId: String
  employeeId: String
  personalDataId: String
  personalData: PersonalData
}

type LocationCount {
  addresses: Int!
}

type Location {
  id: ID!
  name: String!
  addresses: [Address!]
  _count: LocationCount!
}

type LocalCount {
  addresses: Int!
}

type Local {
  id: ID!
  name: String!
  addresses: [Address!]
  createdAt: DateTime!
  updatedAt: DateTime!
  borrower: Borrower!
  borrowerId: String!
  _count: LocalCount!
}

type Address {
  id: ID!
  street: String!
  exteriorNumber: String!
  interiorNumber: String!
  postalCode: String!
  location: Location!
  locationId: String!
  local: Local
  localId: String
  personalData: PersonalData
  personalDataId: String
}

type AvalCount {
  documents: Int!
}

type Aval {
  id: ID!
  email: String!
  personalData: PersonalData!
  documents: [Document!]
  createdAt: DateTime!
  updatedAt: DateTime!
  personalDataId: String!
  _count: AvalCount!
}

type PersonalDataCount {
  phones: Int!
  addresses: Int!
  employee: Int!
  aval: Int!
  borrower: Int!
}

type PersonalData {
  id: ID!
  fullName: String!
  firstName: String!
  lastName: String!
  phones: [Phone!]
  addresses: [Address!]
  createdAt: DateTime!
  updatedAt: DateTime!
  employee: [Employee!]
  aval: [Aval!]
  borrower: [Borrower!]
  _count: PersonalDataCount!
}

type Comment {
  id: ID!
  text: String!
  createdAt: DateTime!
  createdBy: Employee!
  createdById: String!
  payment: LoanPayment!
  employeeId: String!
  loanPaymentId: String!
}

type CommissionPayment {
  id: ID!
  amount: Decimal!
  paymentSchedule: PaymentSchedule!
  loan: Loan
  employee: Employee!
  loanId: String
  paymentScheduleId: String!
  employeeId: String!
  status: CommissionPaymentStatus!
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

enum CommissionPaymentStatus {
  PAID_OUT
  PENDING
  REJECTED
}

type PaymentScheduleCount {
  loanPayments: Int!
  commissionPayment: Int!
}

type PaymentSchedule {
  id: ID!
  numeration: Int!
  amountToPay: Decimal!
  paidAmount: Decimal!
  returnToCapital: Decimal!
  profit: Decimal!
  status: PaymentState!
  delayed: Boolean!
  dueDate: DateTime!
  details: String
  createdAt: DateTime!
  updatedAt: DateTime!
  loan: Loan!
  loanId: String!
  loanPayments: [LoanPayment!]
  commissionPayment: [CommissionPayment!]
  _count: PaymentScheduleCount!
  paymentBreakDown: PaymentBreakDown!
  pendingAmount: Float!
  borrower: Borrower!
}

enum PaymentState {
  PENDING
  PAID_OUT
  PARTIALLY_PAID
}

type LoanPaymentCount {
  comments: Int!
  paymentSchedules: Int!
}

type LoanPayment {
  id: ID!
  amount: Decimal!
  profitAmount: Decimal!
  returnToCapital: Decimal!
  date: DateTime!
  percentage: Decimal!
  comments: [Comment!]
  createdAt: DateTime!
  updatedAt: DateTime!
  paymentSchedules: [PaymentSchedule!]
  loan: Loan!
  loanId: String!
  employee: Employee!
  employeeId: String!
  _count: LoanPaymentCount!
}

type ComissionPaymentConfiguration {
  id: ID!
  employeeType: EmployeesTypes!
  loanType: Loantype!
  loantypeId: String!
  commissionGoalType: CommissionGoalType!
  commissionType: CommissionType!
}

enum EmployeesTypes {
  LIAISON_EXECUTIVE
  LOAN_LEAD
}

enum CommissionGoalType {
  NEW_LOAN
  PAYMENT_RECEIVED
}

enum CommissionType {
  FIXED_AMOUNT
  PERCENTAGE
}

type LoantypeCount {
  loan: Int!
  comissionPaymentConfiguration: Int!
}

type Loantype {
  id: ID!
  name: String!
  weekDuration: Int!
  rate: Float!
  overdueRate: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  loan: [Loan!]
  comissionPaymentConfiguration: [ComissionPaymentConfiguration!]
  _count: LoantypeCount!
}

type LoanCount {
  payments: Int!
  paymentSchedule: Int!
  commissionPayment: Int!
}

type Loan {
  id: ID!
  status: LoanState!
  payments: [LoanPayment!]
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal!
  amountToPay: Decimal!
  paidAmount: Decimal!
  pendingAmount: Decimal!
  renovationProfitAmount: Decimal!
  renovationPendingAmount: Decimal!
  baseProfitAmount: Decimal!
  totalProfitAmount: Decimal!
  loanType: Loantype!
  signDate: DateTime!
  createdAt: DateTime!
  employee: Employee!
  updatedAt: DateTime!
  contract: Contract!
  contractId: String!
  loantypeId: String!
  employeeId: String!
  paymentSchedule: [PaymentSchedule!]
  commissionPayment: [CommissionPayment!]
  renovatedFromId: String
  _count: LoanCount!
  totalPaidAmount: Float!
}

enum LoanState {
  REQUESTED
  IN_REVIEW
  APPROVED
  REJECTED
  PAID_OUT
  POSTPONED
}

type Expenses {
  id: ID!
  amountToPay: Decimal!
  status: PaymentState!
  dueDate: DateTime!
  payedAt: DateTime!
  employee: Employee!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String
  employeeId: String!
}

type EmployeeCount {
  documents: Int!
  loan: Int!
  loanPayment: Int!
  commissionPayment: Int!
  contractEmployee: Int!
  contractLoanLead: Int!
  expenses: Int!
  Comment: Int!
}

type Employee {
  id: ID!
  type: EmployeesTypes!
  documents: [Document!]
  user: User!
  personalData: PersonalData!
  createdAt: DateTime!
  updatedAt: DateTime!
  loan: [Loan!]
  userId: String!
  loanPayment: [LoanPayment!]
  commissionPayment: [CommissionPayment!]
  contractEmployee: [Contract!]
  contractLoanLead: [Contract!]
  expenses: [Expenses!]
  personalDataId: String!
  Comment: [Comment!]
  _count: EmployeeCount!
}

type Document {
  id: ID!
  type: DocumentType!
  borrower: Borrower
  borrowerId: String
  employee: Employee
  aval: Aval
  avalId: String
  contract: Contract
  contractId: String
  employeeId: String
}

enum DocumentType {
  DNI
  NSS
  RFC
  SHOP_PHOTO
  BANC_ACCOUNT
  ADDRESS_PROFF
  CREDIT_BUREAU
  DRIVER_LICENCE
  JOB_APPLICATION
  CONTRACT_EVIDENCE
  LETTER_NO_CRIMINAL_RECORD
}

type BorrowerCount {
  documents: Int!
  contract: Int!
  local: Int!
}

type Borrower {
  id: ID!
  email: String
  documents: [Document!]
  personalData: PersonalData!
  createdAt: DateTime!
  updatedAt: DateTime!
  contract: [Contract!]
  local: [Local!]
  personalDataId: String!
  _count: BorrowerCount!
}

type ContractCount {
  documents: Int!
  loans: Int!
}

type Contract {
  id: ID!
  borrower: Borrower!
  borrowerId: String!
  documents: [Document!]
  loans: [Loan!]
  createdAt: DateTime!
  dueDate: DateTime!
  signDate: DateTime!
  updatedAt: DateTime!
  contractType: ContractType!
  contractTypeId: String!
  loanLeadId: String
  employeeId: String!
  loanLead: Employee
  employee: Employee!
  _count: ContractCount!
}

type ContractTypeCount {
  contract: Int!
}

type ContractType {
  id: ID!
  name: String!
  monthDuration: Int!
  amount: Decimal!
  maxRate: Decimal!
  createdAt: DateTime!
  updatedAt: DateTime
  contract: [Contract!]
  _count: ContractTypeCount!
}

type SignInOutput {
  token: String!
  user: User!
}

type PaymentBreakDown {
  amount: Float!
  profit: Float!
  returnOfCapital: Float!
}

type IResumePayload {
  profit: Float!
  paidOut: Float!
  newLoans: Float!
  returnOfCapital: Float!
  expenses: Float!
}

type Query {
  contractTypes: [ContractType!]!
  borrowers(where: BorrowerWhereInput!): [Borrower!]!
  employees(where: EmployeeWhereInput!): [Employee!]!
  contracts(where: ContractWhereInput!): [Contract!]!
  loans(where: LoanWhereInput!): [Loan!]!
  loanTypes(where: LoantypeWhereInput!): [Loantype!]!
  loanPayments(where: LoanPaymentWhereInput!): [LoanPayment!]!
  paymentSchedulesWhere(where: PaymentScheduleWhereInput!): [PaymentSchedule!]!
  rangeResume(where: RangeDaysInput!): IResumePayload!
  locals(where: LocalWhereInput!): [Local!]!
}

input BorrowerWhereInput {
  AND: [BorrowerWhereInput!]
  OR: [BorrowerWhereInput!]
  NOT: [BorrowerWhereInput!]
  id: StringFilter
  email: StringNullableFilter
  documents: DocumentListRelationFilter
  personalData: PersonalDataRelationFilter
  contract: ContractListRelationFilter
  local: LocalListRelationFilter
  personalDataId: StringFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DocumentListRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: StringFilter
  type: EnumDocumentTypeFilter
  borrower: BorrowerRelationFilter
  borrowerId: StringNullableFilter
  employee: EmployeeRelationFilter
  aval: AvalRelationFilter
  avalId: StringNullableFilter
  contract: ContractRelationFilter
  contractId: StringNullableFilter
  employeeId: StringNullableFilter
}

input EnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input NestedEnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input BorrowerRelationFilter {
  is: BorrowerWhereInput
  isNot: BorrowerWhereInput
}

input EmployeeRelationFilter {
  is: EmployeeWhereInput
  isNot: EmployeeWhereInput
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  id: StringFilter
  type: EnumEmployeesTypesFilter
  documents: DocumentListRelationFilter
  user: UserRelationFilter
  personalData: PersonalDataRelationFilter
  loan: LoanListRelationFilter
  userId: StringFilter
  loanPayment: LoanPaymentListRelationFilter
  commissionPayment: CommissionPaymentListRelationFilter
  contractEmployee: ContractListRelationFilter
  contractLoanLead: ContractListRelationFilter
  expenses: ExpensesListRelationFilter
  personalDataId: StringFilter
  Comment: CommentListRelationFilter
}

input EnumEmployeesTypesFilter {
  equals: EmployeesTypes
  in: [EmployeesTypes!]
  notIn: [EmployeesTypes!]
  not: NestedEnumEmployeesTypesFilter
}

input NestedEnumEmployeesTypesFilter {
  equals: EmployeesTypes
  in: [EmployeesTypes!]
  notIn: [EmployeesTypes!]
  not: NestedEnumEmployeesTypesFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  password: StringFilter
  employee: EmployeeRelationFilter
}

input PersonalDataRelationFilter {
  is: PersonalDataWhereInput
  isNot: PersonalDataWhereInput
}

input PersonalDataWhereInput {
  AND: [PersonalDataWhereInput!]
  OR: [PersonalDataWhereInput!]
  NOT: [PersonalDataWhereInput!]
  id: StringFilter
  fullName: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  phones: PhoneListRelationFilter
  addresses: AddressListRelationFilter
  employee: EmployeeListRelationFilter
  aval: AvalListRelationFilter
  borrower: BorrowerListRelationFilter
}

input PhoneListRelationFilter {
  every: PhoneWhereInput
  some: PhoneWhereInput
  none: PhoneWhereInput
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  id: StringFilter
  number: StringFilter
  avalId: StringNullableFilter
  employeeId: StringNullableFilter
  personalDataId: StringNullableFilter
  personalData: PersonalDataRelationFilter
}

input AddressListRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: StringFilter
  street: StringFilter
  exteriorNumber: StringFilter
  interiorNumber: StringFilter
  postalCode: StringFilter
  location: LocationRelationFilter
  locationId: StringFilter
  local: LocalRelationFilter
  localId: StringNullableFilter
  personalData: PersonalDataRelationFilter
  personalDataId: StringNullableFilter
}

input LocationRelationFilter {
  is: LocationWhereInput
  isNot: LocationWhereInput
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: StringFilter
  name: StringFilter
  addresses: AddressListRelationFilter
}

input LocalRelationFilter {
  is: LocalWhereInput
  isNot: LocalWhereInput
}

input LocalWhereInput {
  AND: [LocalWhereInput!]
  OR: [LocalWhereInput!]
  NOT: [LocalWhereInput!]
  id: StringFilter
  name: StringFilter
  addresses: AddressListRelationFilter
  borrower: BorrowerRelationFilter
  borrowerId: StringFilter
}

input EmployeeListRelationFilter {
  every: EmployeeWhereInput
  some: EmployeeWhereInput
  none: EmployeeWhereInput
}

input AvalListRelationFilter {
  every: AvalWhereInput
  some: AvalWhereInput
  none: AvalWhereInput
}

input AvalWhereInput {
  AND: [AvalWhereInput!]
  OR: [AvalWhereInput!]
  NOT: [AvalWhereInput!]
  id: StringFilter
  email: StringFilter
  personalData: PersonalDataRelationFilter
  documents: DocumentListRelationFilter
  personalDataId: StringFilter
}

input BorrowerListRelationFilter {
  every: BorrowerWhereInput
  some: BorrowerWhereInput
  none: BorrowerWhereInput
}

input LoanListRelationFilter {
  every: LoanWhereInput
  some: LoanWhereInput
  none: LoanWhereInput
}

input LoanWhereInput {
  AND: [LoanWhereInput!]
  OR: [LoanWhereInput!]
  NOT: [LoanWhereInput!]
  id: StringFilter
  weeklyPaymentAmount: DecimalFilter
  amountGived: DecimalFilter
  loanType: LoantypeRelationFilter
  signDate: DateTimeFilter
  employee: EmployeeRelationFilter
  updatedAt: DateTimeFilter
  contract: ContractRelationFilter
  contractId: StringFilter
  loantypeId: StringFilter
  employeeId: StringFilter
  paymentSchedule: PaymentScheduleListRelationFilter
  commissionPayment: CommissionPaymentListRelationFilter
  renovatedFromId: StringNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input NestedDecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: NestedDecimalFilter
}

input LoantypeRelationFilter {
  is: LoantypeWhereInput
  isNot: LoantypeWhereInput
}

input LoantypeWhereInput {
  AND: [LoantypeWhereInput!]
  OR: [LoantypeWhereInput!]
  NOT: [LoantypeWhereInput!]
  id: StringFilter
  name: StringFilter
  weekDuration: IntFilter
  rate: FloatFilter
  overdueRate: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  loan: LoanListRelationFilter
  comissionPaymentConfiguration: ComissionPaymentConfigurationListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input ComissionPaymentConfigurationListRelationFilter {
  every: ComissionPaymentConfigurationWhereInput
  some: ComissionPaymentConfigurationWhereInput
  none: ComissionPaymentConfigurationWhereInput
}

input ComissionPaymentConfigurationWhereInput {
  AND: [ComissionPaymentConfigurationWhereInput!]
  OR: [ComissionPaymentConfigurationWhereInput!]
  NOT: [ComissionPaymentConfigurationWhereInput!]
  id: StringFilter
  employeeType: EnumEmployeesTypesFilter
  loanType: LoantypeRelationFilter
  loantypeId: StringFilter
  commissionGoalType: EnumCommissionGoalTypeFilter
  commissionType: EnumCommissionTypeFilter
}

input EnumCommissionGoalTypeFilter {
  equals: CommissionGoalType
  in: [CommissionGoalType!]
  notIn: [CommissionGoalType!]
  not: NestedEnumCommissionGoalTypeFilter
}

input NestedEnumCommissionGoalTypeFilter {
  equals: CommissionGoalType
  in: [CommissionGoalType!]
  notIn: [CommissionGoalType!]
  not: NestedEnumCommissionGoalTypeFilter
}

input EnumCommissionTypeFilter {
  equals: CommissionType
  in: [CommissionType!]
  notIn: [CommissionType!]
  not: NestedEnumCommissionTypeFilter
}

input NestedEnumCommissionTypeFilter {
  equals: CommissionType
  in: [CommissionType!]
  notIn: [CommissionType!]
  not: NestedEnumCommissionTypeFilter
}

input ContractRelationFilter {
  is: ContractWhereInput
  isNot: ContractWhereInput
}

input ContractWhereInput {
  AND: [ContractWhereInput!]
  OR: [ContractWhereInput!]
  NOT: [ContractWhereInput!]
  id: StringFilter
  borrower: BorrowerRelationFilter
  borrowerId: StringFilter
  documents: DocumentListRelationFilter
  dueDate: DateTimeFilter
  signDate: DateTimeFilter
  contractType: ContractTypeRelationFilter
  contractTypeId: StringFilter
  loanLeadId: StringNullableFilter
  employeeId: StringFilter
  loanLead: EmployeeRelationFilter
  employee: EmployeeRelationFilter
}

input ContractTypeRelationFilter {
  is: ContractTypeWhereInput
  isNot: ContractTypeWhereInput
}

input ContractTypeWhereInput {
  AND: [ContractTypeWhereInput!]
  OR: [ContractTypeWhereInput!]
  NOT: [ContractTypeWhereInput!]
  id: StringFilter
  name: StringFilter
  monthDuration: IntFilter
  amount: DecimalFilter
  maxRate: DecimalFilter
  contract: ContractListRelationFilter
}

input ContractListRelationFilter {
  every: ContractWhereInput
  some: ContractWhereInput
  none: ContractWhereInput
}

input PaymentScheduleListRelationFilter {
  every: PaymentScheduleWhereInput
  some: PaymentScheduleWhereInput
  none: PaymentScheduleWhereInput
}

input PaymentScheduleWhereInput {
  AND: [PaymentScheduleWhereInput!]
  OR: [PaymentScheduleWhereInput!]
  NOT: [PaymentScheduleWhereInput!]
  id: StringFilter
  numeration: IntFilter
  amountToPay: DecimalFilter
  paidAmount: DecimalFilter
  returnToCapital: DecimalFilter
  profit: DecimalFilter
  status: EnumPaymentStateFilter
  delayed: BoolFilter
  dueDate: DateTimeFilter
  details: StringNullableFilter
  loan: LoanRelationFilter
  loanId: StringFilter
  loanPayments: LoanPaymentListRelationFilter
}

input EnumPaymentStateFilter {
  equals: PaymentState
  in: [PaymentState!]
  notIn: [PaymentState!]
  not: NestedEnumPaymentStateFilter
}

input NestedEnumPaymentStateFilter {
  equals: PaymentState
  in: [PaymentState!]
  notIn: [PaymentState!]
  not: NestedEnumPaymentStateFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input LoanRelationFilter {
  is: LoanWhereInput
  isNot: LoanWhereInput
}

input LoanPaymentListRelationFilter {
  every: LoanPaymentWhereInput
  some: LoanPaymentWhereInput
  none: LoanPaymentWhereInput
}

input LoanPaymentWhereInput {
  AND: [LoanPaymentWhereInput!]
  OR: [LoanPaymentWhereInput!]
  NOT: [LoanPaymentWhereInput!]
  id: StringFilter
  amount: DecimalFilter
  profitAmount: DecimalFilter
  returnToCapital: DecimalFilter
  date: DateTimeFilter
  percentage: DecimalFilter
  comments: CommentListRelationFilter
  paymentSchedules: PaymentScheduleListRelationFilter
  loan: LoanRelationFilter
  loanId: StringFilter
  employee: EmployeeRelationFilter
  employeeId: StringFilter
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: StringFilter
  text: StringFilter
  createdById: StringFilter
  payment: LoanPaymentRelationFilter
  employeeId: StringFilter
  loanPaymentId: StringFilter
}

input LoanPaymentRelationFilter {
  is: LoanPaymentWhereInput
  isNot: LoanPaymentWhereInput
}

input CommissionPaymentListRelationFilter {
  every: CommissionPaymentWhereInput
  some: CommissionPaymentWhereInput
  none: CommissionPaymentWhereInput
}

input CommissionPaymentWhereInput {
  AND: [CommissionPaymentWhereInput!]
  OR: [CommissionPaymentWhereInput!]
  NOT: [CommissionPaymentWhereInput!]
  id: StringFilter
  amount: DecimalFilter
  paymentSchedule: PaymentScheduleRelationFilter
  loan: LoanRelationFilter
  employee: EmployeeRelationFilter
  loanId: StringNullableFilter
  paymentScheduleId: StringFilter
  employeeId: StringFilter
  status: EnumCommissionPaymentStatusFilter
}

input PaymentScheduleRelationFilter {
  is: PaymentScheduleWhereInput
  isNot: PaymentScheduleWhereInput
}

input EnumCommissionPaymentStatusFilter {
  equals: CommissionPaymentStatus
  in: [CommissionPaymentStatus!]
  notIn: [CommissionPaymentStatus!]
  not: NestedEnumCommissionPaymentStatusFilter
}

input NestedEnumCommissionPaymentStatusFilter {
  equals: CommissionPaymentStatus
  in: [CommissionPaymentStatus!]
  notIn: [CommissionPaymentStatus!]
  not: NestedEnumCommissionPaymentStatusFilter
}

input ExpensesListRelationFilter {
  every: ExpensesWhereInput
  some: ExpensesWhereInput
  none: ExpensesWhereInput
}

input ExpensesWhereInput {
  AND: [ExpensesWhereInput!]
  OR: [ExpensesWhereInput!]
  NOT: [ExpensesWhereInput!]
  id: StringFilter
  amountToPay: DecimalFilter
  status: EnumPaymentStateFilter
  dueDate: DateTimeFilter
  payedAt: DateTimeFilter
  employee: EmployeeRelationFilter
  userId: StringNullableFilter
  employeeId: StringFilter
}

input AvalRelationFilter {
  is: AvalWhereInput
  isNot: AvalWhereInput
}

input LocalListRelationFilter {
  every: LocalWhereInput
  some: LocalWhereInput
  none: LocalWhereInput
}

input RangeDaysInput {
  dateStart: DateTime!
  dateEnd: DateTime!
}

type Mutation {
  createContractType(input: ContractTypeCreateInput!): ContractType!
  signUp(input: UserCreateInput!): User!
  signIn(input: SignInInput!): SignInOutput!
  createBorrower(input: BorrowerCreateInput!): Borrower!
  createEmployee(input: EmployeeCreateInput!): Employee!
  createContract(input: ContractCreateInput!): Contract!
  createLoan(input: CustomCreateLoanInput!): Loan!
  createLoanPayment(input: LoanPaymentCreateInput!): LoanPayment!
  payPayment(input: LoanPaymentUpdateInput!): Loan!
  createLoanType(input: LoantypeCreateInput!): Loantype!
  createPhone(input: PhoneCreateInput!): Phone!
  createLocal(input: LocalCreateInput!): Local!
}

input ContractTypeCreateInput {
  name: String!
  monthDuration: Int!
  amount: Decimal!
  maxRate: Decimal!
  contract: ContractCreateNestedManyWithoutContractTypeInput
}

input ContractCreateNestedManyWithoutContractTypeInput {
  create: [ContractCreateWithoutContractTypeInput!]
  connectOrCreate: [ContractCreateOrConnectWithoutContractTypeInput!]
  createMany: ContractCreateManyContractTypeInputEnvelope
  connect: [ContractWhereUniqueInput!]
}

input ContractCreateWithoutContractTypeInput {
  borrower: BorrowerCreateNestedOneWithoutContractInput!
  documents: DocumentCreateNestedManyWithoutContractInput
  dueDate: DateTime!
  signDate: DateTime!
  loanLead: EmployeeCreateNestedOneWithoutContractLoanLeadInput
  employee: EmployeeCreateNestedOneWithoutContractEmployeeInput!
}

input BorrowerCreateNestedOneWithoutContractInput {
  create: BorrowerCreateWithoutContractInput
  connectOrCreate: BorrowerCreateOrConnectWithoutContractInput
  connect: BorrowerWhereUniqueInput
}

input BorrowerCreateWithoutContractInput {
  email: EmailAddress
  documents: DocumentCreateNestedManyWithoutBorrowerInput
  personalData: PersonalDataCreateNestedOneWithoutBorrowerInput!
  local: LocalCreateNestedManyWithoutBorrowerInput
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input DocumentCreateNestedManyWithoutBorrowerInput {
  create: [DocumentCreateWithoutBorrowerInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutBorrowerInput!]
  createMany: DocumentCreateManyBorrowerInputEnvelope
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateWithoutBorrowerInput {
  id: String
  type: DocumentType!
  employee: EmployeeCreateNestedOneWithoutDocumentsInput
  aval: AvalCreateNestedOneWithoutDocumentsInput
  contract: ContractCreateNestedOneWithoutDocumentsInput
}

input EmployeeCreateNestedOneWithoutDocumentsInput {
  create: EmployeeCreateWithoutDocumentsInput
  connectOrCreate: EmployeeCreateOrConnectWithoutDocumentsInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutDocumentsInput {
  type: EmployeesTypes!
  user: UserCreateNestedOneWithoutEmployeeInput!
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input UserCreateNestedOneWithoutEmployeeInput {
  create: UserCreateWithoutEmployeeInput
  connectOrCreate: UserCreateOrConnectWithoutEmployeeInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEmployeeInput {
  id: String
  email: EmailAddress!
  password: String!
}

input UserCreateOrConnectWithoutEmployeeInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutEmployeeInput!
}

input UserWhereUniqueInput {
  id: String
  email: EmailAddress
}

input PersonalDataCreateNestedOneWithoutEmployeeInput {
  create: PersonalDataCreateWithoutEmployeeInput
  connectOrCreate: PersonalDataCreateOrConnectWithoutEmployeeInput
  connect: PersonalDataWhereUniqueInput
}

input PersonalDataCreateWithoutEmployeeInput {
  id: String
  fullName: String!
  firstName: String!
  lastName: String!
  phones: PhoneCreateNestedManyWithoutPersonalDataInput
  addresses: AddressCreateNestedManyWithoutPersonalDataInput
  aval: AvalCreateNestedManyWithoutPersonalDataInput
  borrower: BorrowerCreateNestedManyWithoutPersonalDataInput
}

input PhoneCreateNestedManyWithoutPersonalDataInput {
  create: [PhoneCreateWithoutPersonalDataInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutPersonalDataInput!]
  createMany: PhoneCreateManyPersonalDataInputEnvelope
  connect: [PhoneWhereUniqueInput!]
}

input PhoneCreateWithoutPersonalDataInput {
  number: String!
  avalId: String
  employeeId: String
}

input PhoneCreateOrConnectWithoutPersonalDataInput {
  where: PhoneWhereUniqueInput!
  create: PhoneCreateWithoutPersonalDataInput!
}

input PhoneWhereUniqueInput {
  id: String
  number: String
}

input PhoneCreateManyPersonalDataInputEnvelope {
  data: [PhoneCreateManyPersonalDataInput!]!
  skipDuplicates: Boolean
}

input PhoneCreateManyPersonalDataInput {
  number: String!
  avalId: String
  employeeId: String
}

input AddressCreateNestedManyWithoutPersonalDataInput {
  create: [AddressCreateWithoutPersonalDataInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutPersonalDataInput!]
  createMany: AddressCreateManyPersonalDataInputEnvelope
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutPersonalDataInput {
  id: String
  street: String!
  exteriorNumber: String!
  interiorNumber: String!
  postalCode: String!
  location: LocationCreateNestedOneWithoutAddressesInput!
  local: LocalCreateNestedOneWithoutAddressesInput
}

input LocationCreateNestedOneWithoutAddressesInput {
  create: LocationCreateWithoutAddressesInput
  connectOrCreate: LocationCreateOrConnectWithoutAddressesInput
  connect: LocationWhereUniqueInput
}

input LocationCreateWithoutAddressesInput {
  id: String
  name: String!
}

input LocationCreateOrConnectWithoutAddressesInput {
  where: LocationWhereUniqueInput!
  create: LocationCreateWithoutAddressesInput!
}

input LocationWhereUniqueInput {
  id: String
}

input LocalCreateNestedOneWithoutAddressesInput {
  create: LocalCreateWithoutAddressesInput
  connectOrCreate: LocalCreateOrConnectWithoutAddressesInput
  connect: LocalWhereUniqueInput
}

input LocalCreateWithoutAddressesInput {
  name: String!
  borrower: BorrowerCreateNestedOneWithoutLocalInput!
}

input BorrowerCreateNestedOneWithoutLocalInput {
  create: BorrowerCreateWithoutLocalInput
  connectOrCreate: BorrowerCreateOrConnectWithoutLocalInput
  connect: BorrowerWhereUniqueInput
}

input BorrowerCreateWithoutLocalInput {
  email: EmailAddress
  documents: DocumentCreateNestedManyWithoutBorrowerInput
  personalData: PersonalDataCreateNestedOneWithoutBorrowerInput!
  contract: ContractCreateNestedManyWithoutBorrowerInput
}

input PersonalDataCreateNestedOneWithoutBorrowerInput {
  create: PersonalDataCreateWithoutBorrowerInput
  connectOrCreate: PersonalDataCreateOrConnectWithoutBorrowerInput
  connect: PersonalDataWhereUniqueInput
}

input PersonalDataCreateWithoutBorrowerInput {
  id: String
  fullName: String!
  firstName: String!
  lastName: String!
  phones: PhoneCreateNestedManyWithoutPersonalDataInput
  addresses: AddressCreateNestedManyWithoutPersonalDataInput
  employee: EmployeeCreateNestedManyWithoutPersonalDataInput
  aval: AvalCreateNestedManyWithoutPersonalDataInput
}

input EmployeeCreateNestedManyWithoutPersonalDataInput {
  create: [EmployeeCreateWithoutPersonalDataInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutPersonalDataInput!]
  createMany: EmployeeCreateManyPersonalDataInputEnvelope
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateWithoutPersonalDataInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  user: UserCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input DocumentCreateNestedManyWithoutEmployeeInput {
  create: [DocumentCreateWithoutEmployeeInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutEmployeeInput!]
  createMany: DocumentCreateManyEmployeeInputEnvelope
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateWithoutEmployeeInput {
  id: String
  type: DocumentType!
  borrower: BorrowerCreateNestedOneWithoutDocumentsInput
  aval: AvalCreateNestedOneWithoutDocumentsInput
  contract: ContractCreateNestedOneWithoutDocumentsInput
}

input BorrowerCreateNestedOneWithoutDocumentsInput {
  create: BorrowerCreateWithoutDocumentsInput
  connectOrCreate: BorrowerCreateOrConnectWithoutDocumentsInput
  connect: BorrowerWhereUniqueInput
}

input BorrowerCreateWithoutDocumentsInput {
  email: EmailAddress
  personalData: PersonalDataCreateNestedOneWithoutBorrowerInput!
  contract: ContractCreateNestedManyWithoutBorrowerInput
  local: LocalCreateNestedManyWithoutBorrowerInput
}

input ContractCreateNestedManyWithoutBorrowerInput {
  create: [ContractCreateWithoutBorrowerInput!]
  connectOrCreate: [ContractCreateOrConnectWithoutBorrowerInput!]
  createMany: ContractCreateManyBorrowerInputEnvelope
  connect: [ContractWhereUniqueInput!]
}

input ContractCreateWithoutBorrowerInput {
  documents: DocumentCreateNestedManyWithoutContractInput
  dueDate: DateTime!
  signDate: DateTime!
  contractType: ContractTypeCreateNestedOneWithoutContractInput!
  loanLead: EmployeeCreateNestedOneWithoutContractLoanLeadInput
  employee: EmployeeCreateNestedOneWithoutContractEmployeeInput!
}

input DocumentCreateNestedManyWithoutContractInput {
  create: [DocumentCreateWithoutContractInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutContractInput!]
  createMany: DocumentCreateManyContractInputEnvelope
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateWithoutContractInput {
  id: String
  type: DocumentType!
  borrower: BorrowerCreateNestedOneWithoutDocumentsInput
  employee: EmployeeCreateNestedOneWithoutDocumentsInput
  aval: AvalCreateNestedOneWithoutDocumentsInput
}

input AvalCreateNestedOneWithoutDocumentsInput {
  create: AvalCreateWithoutDocumentsInput
  connectOrCreate: AvalCreateOrConnectWithoutDocumentsInput
  connect: AvalWhereUniqueInput
}

input AvalCreateWithoutDocumentsInput {
  id: String
  email: EmailAddress!
  personalData: PersonalDataCreateNestedOneWithoutAvalInput!
}

input PersonalDataCreateNestedOneWithoutAvalInput {
  create: PersonalDataCreateWithoutAvalInput
  connectOrCreate: PersonalDataCreateOrConnectWithoutAvalInput
  connect: PersonalDataWhereUniqueInput
}

input PersonalDataCreateWithoutAvalInput {
  id: String
  fullName: String!
  firstName: String!
  lastName: String!
  phones: PhoneCreateNestedManyWithoutPersonalDataInput
  addresses: AddressCreateNestedManyWithoutPersonalDataInput
  employee: EmployeeCreateNestedManyWithoutPersonalDataInput
  borrower: BorrowerCreateNestedManyWithoutPersonalDataInput
}

input BorrowerCreateNestedManyWithoutPersonalDataInput {
  create: [BorrowerCreateWithoutPersonalDataInput!]
  connectOrCreate: [BorrowerCreateOrConnectWithoutPersonalDataInput!]
  createMany: BorrowerCreateManyPersonalDataInputEnvelope
  connect: [BorrowerWhereUniqueInput!]
}

input BorrowerCreateWithoutPersonalDataInput {
  email: EmailAddress
  documents: DocumentCreateNestedManyWithoutBorrowerInput
  contract: ContractCreateNestedManyWithoutBorrowerInput
  local: LocalCreateNestedManyWithoutBorrowerInput
}

input LocalCreateNestedManyWithoutBorrowerInput {
  create: [LocalCreateWithoutBorrowerInput!]
  connectOrCreate: [LocalCreateOrConnectWithoutBorrowerInput!]
  createMany: LocalCreateManyBorrowerInputEnvelope
  connect: [LocalWhereUniqueInput!]
}

input LocalCreateWithoutBorrowerInput {
  name: String!
  addresses: AddressCreateNestedManyWithoutLocalInput
}

input AddressCreateNestedManyWithoutLocalInput {
  create: [AddressCreateWithoutLocalInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutLocalInput!]
  createMany: AddressCreateManyLocalInputEnvelope
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateWithoutLocalInput {
  id: String
  street: String!
  exteriorNumber: String!
  interiorNumber: String!
  postalCode: String!
  location: LocationCreateNestedOneWithoutAddressesInput!
  personalData: PersonalDataCreateNestedOneWithoutAddressesInput
}

input PersonalDataCreateNestedOneWithoutAddressesInput {
  create: PersonalDataCreateWithoutAddressesInput
  connectOrCreate: PersonalDataCreateOrConnectWithoutAddressesInput
  connect: PersonalDataWhereUniqueInput
}

input PersonalDataCreateWithoutAddressesInput {
  id: String
  fullName: String!
  firstName: String!
  lastName: String!
  phones: PhoneCreateNestedManyWithoutPersonalDataInput
  employee: EmployeeCreateNestedManyWithoutPersonalDataInput
  aval: AvalCreateNestedManyWithoutPersonalDataInput
  borrower: BorrowerCreateNestedManyWithoutPersonalDataInput
}

input AvalCreateNestedManyWithoutPersonalDataInput {
  create: [AvalCreateWithoutPersonalDataInput!]
  connectOrCreate: [AvalCreateOrConnectWithoutPersonalDataInput!]
  createMany: AvalCreateManyPersonalDataInputEnvelope
  connect: [AvalWhereUniqueInput!]
}

input AvalCreateWithoutPersonalDataInput {
  id: String
  email: EmailAddress!
  documents: DocumentCreateNestedManyWithoutAvalInput
}

input DocumentCreateNestedManyWithoutAvalInput {
  create: [DocumentCreateWithoutAvalInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutAvalInput!]
  createMany: DocumentCreateManyAvalInputEnvelope
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateWithoutAvalInput {
  id: String
  type: DocumentType!
  borrower: BorrowerCreateNestedOneWithoutDocumentsInput
  employee: EmployeeCreateNestedOneWithoutDocumentsInput
  contract: ContractCreateNestedOneWithoutDocumentsInput
}

input ContractCreateNestedOneWithoutDocumentsInput {
  create: ContractCreateWithoutDocumentsInput
  connectOrCreate: ContractCreateOrConnectWithoutDocumentsInput
  connect: ContractWhereUniqueInput
}

input ContractCreateWithoutDocumentsInput {
  borrower: BorrowerCreateNestedOneWithoutContractInput!
  dueDate: DateTime!
  signDate: DateTime!
  contractType: ContractTypeCreateNestedOneWithoutContractInput!
  loanLead: EmployeeCreateNestedOneWithoutContractLoanLeadInput
  employee: EmployeeCreateNestedOneWithoutContractEmployeeInput!
}

input ContractTypeCreateNestedOneWithoutContractInput {
  create: ContractTypeCreateWithoutContractInput
  connectOrCreate: ContractTypeCreateOrConnectWithoutContractInput
  connect: ContractTypeWhereUniqueInput
}

input ContractTypeCreateWithoutContractInput {
  name: String!
  monthDuration: Int!
  amount: Decimal!
  maxRate: Decimal!
}

input ContractTypeCreateOrConnectWithoutContractInput {
  where: ContractTypeWhereUniqueInput!
  create: ContractTypeCreateWithoutContractInput!
}

input ContractTypeWhereUniqueInput {
  id: String
}

input EmployeeCreateNestedOneWithoutContractLoanLeadInput {
  create: EmployeeCreateWithoutContractLoanLeadInput
  connectOrCreate: EmployeeCreateOrConnectWithoutContractLoanLeadInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutContractLoanLeadInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  user: UserCreateNestedOneWithoutEmployeeInput!
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input LoanCreateNestedManyWithoutEmployeeInput {
  create: [LoanCreateWithoutEmployeeInput!]
  connectOrCreate: [LoanCreateOrConnectWithoutEmployeeInput!]
  createMany: LoanCreateManyEmployeeInputEnvelope
  connect: [LoanWhereUniqueInput!]
}

input LoanCreateWithoutEmployeeInput {
  id: String
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal
  loanType: LoantypeCreateNestedOneWithoutLoanInput!
  signDate: DateTime
  updatedAt: DateTime
  contract: ContractCreateNestedOneWithoutLoansInput!
  paymentSchedule: PaymentScheduleCreateNestedManyWithoutLoanInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutLoanInput
  renovatedFromId: String
}

input LoantypeCreateNestedOneWithoutLoanInput {
  create: LoantypeCreateWithoutLoanInput
  connectOrCreate: LoantypeCreateOrConnectWithoutLoanInput
  connect: LoantypeWhereUniqueInput
}

input LoantypeCreateWithoutLoanInput {
  id: String
  name: String!
  weekDuration: Int!
  rate: Float!
  overdueRate: Float!
  createdAt: DateTime
  updatedAt: DateTime
  comissionPaymentConfiguration: ComissionPaymentConfigurationCreateNestedManyWithoutLoanTypeInput
}

input ComissionPaymentConfigurationCreateNestedManyWithoutLoanTypeInput {
  create: [ComissionPaymentConfigurationCreateWithoutLoanTypeInput!]
  connectOrCreate: [ComissionPaymentConfigurationCreateOrConnectWithoutLoanTypeInput!]
  createMany: ComissionPaymentConfigurationCreateManyLoanTypeInputEnvelope
  connect: [ComissionPaymentConfigurationWhereUniqueInput!]
}

input ComissionPaymentConfigurationCreateWithoutLoanTypeInput {
  id: String
  employeeType: EmployeesTypes!
  commissionGoalType: CommissionGoalType!
  commissionType: CommissionType!
}

input ComissionPaymentConfigurationCreateOrConnectWithoutLoanTypeInput {
  where: ComissionPaymentConfigurationWhereUniqueInput!
  create: ComissionPaymentConfigurationCreateWithoutLoanTypeInput!
}

input ComissionPaymentConfigurationWhereUniqueInput {
  id: String
}

input ComissionPaymentConfigurationCreateManyLoanTypeInputEnvelope {
  data: [ComissionPaymentConfigurationCreateManyLoanTypeInput!]!
  skipDuplicates: Boolean
}

input ComissionPaymentConfigurationCreateManyLoanTypeInput {
  id: String
  employeeType: EmployeesTypes!
  commissionGoalType: CommissionGoalType!
  commissionType: CommissionType!
}

input LoantypeCreateOrConnectWithoutLoanInput {
  where: LoantypeWhereUniqueInput!
  create: LoantypeCreateWithoutLoanInput!
}

input LoantypeWhereUniqueInput {
  id: String
}

input ContractCreateNestedOneWithoutLoansInput {
  create: ContractCreateWithoutLoansInput
  connectOrCreate: ContractCreateOrConnectWithoutLoansInput
  connect: ContractWhereUniqueInput
}

input ContractCreateWithoutLoansInput {
  borrower: BorrowerCreateNestedOneWithoutContractInput!
  documents: DocumentCreateNestedManyWithoutContractInput
  dueDate: DateTime!
  signDate: DateTime!
  contractType: ContractTypeCreateNestedOneWithoutContractInput!
  loanLead: EmployeeCreateNestedOneWithoutContractLoanLeadInput
  employee: EmployeeCreateNestedOneWithoutContractEmployeeInput!
}

input EmployeeCreateNestedOneWithoutContractEmployeeInput {
  create: EmployeeCreateWithoutContractEmployeeInput
  connectOrCreate: EmployeeCreateOrConnectWithoutContractEmployeeInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutContractEmployeeInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  user: UserCreateNestedOneWithoutEmployeeInput!
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input LoanPaymentCreateNestedManyWithoutEmployeeInput {
  create: [LoanPaymentCreateWithoutEmployeeInput!]
  connectOrCreate: [LoanPaymentCreateOrConnectWithoutEmployeeInput!]
  createMany: LoanPaymentCreateManyEmployeeInputEnvelope
  connect: [LoanPaymentWhereUniqueInput!]
}

input LoanPaymentCreateWithoutEmployeeInput {
  id: String
  amount: Decimal!
  profitAmount: Decimal!
  returnToCapital: Decimal!
  date: DateTime!
  percentage: Decimal!
  comments: CommentCreateNestedManyWithoutPaymentInput
  paymentSchedules: PaymentScheduleCreateNestedManyWithoutLoanPaymentsInput
  loan: LoanCreateNestedOneWithoutPaymentsInput!
}

input CommentCreateNestedManyWithoutPaymentInput {
  create: [CommentCreateWithoutPaymentInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPaymentInput!]
  createMany: CommentCreateManyPaymentInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPaymentInput {
  id: String
  text: String!
  createdById: String!
}

input CommentCreateOrConnectWithoutPaymentInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutPaymentInput!
}

input CommentWhereUniqueInput {
  id: String
}

input CommentCreateManyPaymentInputEnvelope {
  data: [CommentCreateManyPaymentInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyPaymentInput {
  id: String
  text: String!
  createdById: String!
  employeeId: String!
}

input PaymentScheduleCreateNestedManyWithoutLoanPaymentsInput {
  create: [PaymentScheduleCreateWithoutLoanPaymentsInput!]
  connectOrCreate: [PaymentScheduleCreateOrConnectWithoutLoanPaymentsInput!]
  connect: [PaymentScheduleWhereUniqueInput!]
}

input PaymentScheduleCreateWithoutLoanPaymentsInput {
  numeration: Int!
  amountToPay: Decimal!
  paidAmount: Decimal!
  returnToCapital: Decimal
  profit: Decimal
  status: PaymentState!
  delayed: Boolean
  dueDate: DateTime!
  details: String
  loan: LoanCreateNestedOneWithoutPaymentScheduleInput!
}

input LoanCreateNestedOneWithoutPaymentScheduleInput {
  create: LoanCreateWithoutPaymentScheduleInput
  connectOrCreate: LoanCreateOrConnectWithoutPaymentScheduleInput
  connect: LoanWhereUniqueInput
}

input LoanCreateWithoutPaymentScheduleInput {
  id: String
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal
  loanType: LoantypeCreateNestedOneWithoutLoanInput!
  signDate: DateTime
  employee: EmployeeCreateNestedOneWithoutLoanInput!
  updatedAt: DateTime
  contract: ContractCreateNestedOneWithoutLoansInput!
  commissionPayment: CommissionPaymentCreateNestedManyWithoutLoanInput
  renovatedFromId: String
}

input EmployeeCreateNestedOneWithoutLoanInput {
  create: EmployeeCreateWithoutLoanInput
  connectOrCreate: EmployeeCreateOrConnectWithoutLoanInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutLoanInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  user: UserCreateNestedOneWithoutEmployeeInput!
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input CommissionPaymentCreateNestedManyWithoutEmployeeInput {
  create: [CommissionPaymentCreateWithoutEmployeeInput!]
  connectOrCreate: [CommissionPaymentCreateOrConnectWithoutEmployeeInput!]
  createMany: CommissionPaymentCreateManyEmployeeInputEnvelope
  connect: [CommissionPaymentWhereUniqueInput!]
}

input CommissionPaymentCreateWithoutEmployeeInput {
  id: String
  amount: Decimal!
  paymentSchedule: PaymentScheduleCreateNestedOneWithoutCommissionPaymentInput!
  loan: LoanCreateNestedOneWithoutCommissionPaymentInput
  status: CommissionPaymentStatus!
}

input PaymentScheduleCreateNestedOneWithoutCommissionPaymentInput {
  create: PaymentScheduleCreateWithoutCommissionPaymentInput
  connectOrCreate: PaymentScheduleCreateOrConnectWithoutCommissionPaymentInput
  connect: PaymentScheduleWhereUniqueInput
}

input PaymentScheduleCreateWithoutCommissionPaymentInput {
  numeration: Int!
  amountToPay: Decimal!
  paidAmount: Decimal!
  returnToCapital: Decimal
  profit: Decimal
  status: PaymentState!
  delayed: Boolean
  dueDate: DateTime!
  details: String
  loan: LoanCreateNestedOneWithoutPaymentScheduleInput!
  loanPayments: LoanPaymentCreateNestedManyWithoutPaymentSchedulesInput
}

input LoanPaymentCreateNestedManyWithoutPaymentSchedulesInput {
  create: [LoanPaymentCreateWithoutPaymentSchedulesInput!]
  connectOrCreate: [LoanPaymentCreateOrConnectWithoutPaymentSchedulesInput!]
  connect: [LoanPaymentWhereUniqueInput!]
}

input LoanPaymentCreateWithoutPaymentSchedulesInput {
  id: String
  amount: Decimal!
  profitAmount: Decimal!
  returnToCapital: Decimal!
  date: DateTime!
  percentage: Decimal!
  comments: CommentCreateNestedManyWithoutPaymentInput
  loan: LoanCreateNestedOneWithoutPaymentsInput!
  employee: EmployeeCreateNestedOneWithoutLoanPaymentInput!
}

input LoanCreateNestedOneWithoutPaymentsInput {
  create: LoanCreateWithoutPaymentsInput
  connectOrCreate: LoanCreateOrConnectWithoutPaymentsInput
  connect: LoanWhereUniqueInput
}

input LoanCreateWithoutPaymentsInput {
  id: String
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal
  loanType: LoantypeCreateNestedOneWithoutLoanInput!
  signDate: DateTime
  employee: EmployeeCreateNestedOneWithoutLoanInput!
  updatedAt: DateTime
  contract: ContractCreateNestedOneWithoutLoansInput!
  paymentSchedule: PaymentScheduleCreateNestedManyWithoutLoanInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutLoanInput
  renovatedFromId: String
}

input PaymentScheduleCreateNestedManyWithoutLoanInput {
  create: [PaymentScheduleCreateWithoutLoanInput!]
  connectOrCreate: [PaymentScheduleCreateOrConnectWithoutLoanInput!]
  createMany: PaymentScheduleCreateManyLoanInputEnvelope
  connect: [PaymentScheduleWhereUniqueInput!]
}

input PaymentScheduleCreateWithoutLoanInput {
  numeration: Int!
  amountToPay: Decimal!
  paidAmount: Decimal!
  returnToCapital: Decimal
  profit: Decimal
  status: PaymentState!
  delayed: Boolean
  dueDate: DateTime!
  details: String
  loanPayments: LoanPaymentCreateNestedManyWithoutPaymentSchedulesInput
}

input PaymentScheduleCreateOrConnectWithoutLoanInput {
  where: PaymentScheduleWhereUniqueInput!
  create: PaymentScheduleCreateWithoutLoanInput!
}

input PaymentScheduleWhereUniqueInput {
  id: String
}

input PaymentScheduleCreateManyLoanInputEnvelope {
  data: [PaymentScheduleCreateManyLoanInput!]!
  skipDuplicates: Boolean
}

input PaymentScheduleCreateManyLoanInput {
  numeration: Int!
  amountToPay: Decimal!
  paidAmount: Decimal!
  returnToCapital: Decimal
  profit: Decimal
  status: PaymentState!
  delayed: Boolean
  dueDate: DateTime!
  details: String
}

input CommissionPaymentCreateNestedManyWithoutLoanInput {
  create: [CommissionPaymentCreateWithoutLoanInput!]
  connectOrCreate: [CommissionPaymentCreateOrConnectWithoutLoanInput!]
  createMany: CommissionPaymentCreateManyLoanInputEnvelope
  connect: [CommissionPaymentWhereUniqueInput!]
}

input CommissionPaymentCreateWithoutLoanInput {
  id: String
  amount: Decimal!
  paymentSchedule: PaymentScheduleCreateNestedOneWithoutCommissionPaymentInput!
  employee: EmployeeCreateNestedOneWithoutCommissionPaymentInput!
  status: CommissionPaymentStatus!
}

input EmployeeCreateNestedOneWithoutCommissionPaymentInput {
  create: EmployeeCreateWithoutCommissionPaymentInput
  connectOrCreate: EmployeeCreateOrConnectWithoutCommissionPaymentInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutCommissionPaymentInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  user: UserCreateNestedOneWithoutEmployeeInput!
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input ContractCreateNestedManyWithoutEmployeeInput {
  create: [ContractCreateWithoutEmployeeInput!]
  connectOrCreate: [ContractCreateOrConnectWithoutEmployeeInput!]
  createMany: ContractCreateManyEmployeeInputEnvelope
  connect: [ContractWhereUniqueInput!]
}

input ContractCreateWithoutEmployeeInput {
  borrower: BorrowerCreateNestedOneWithoutContractInput!
  documents: DocumentCreateNestedManyWithoutContractInput
  dueDate: DateTime!
  signDate: DateTime!
  contractType: ContractTypeCreateNestedOneWithoutContractInput!
  loanLead: EmployeeCreateNestedOneWithoutContractLoanLeadInput
}

input ContractCreateOrConnectWithoutEmployeeInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutEmployeeInput!
}

input ContractWhereUniqueInput {
  id: String
}

input ContractCreateManyEmployeeInputEnvelope {
  data: [ContractCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input ContractCreateManyEmployeeInput {
  borrowerId: String!
  dueDate: DateTime!
  signDate: DateTime!
  contractTypeId: String!
  loanLeadId: String
}

input ContractCreateNestedManyWithoutLoanLeadInput {
  create: [ContractCreateWithoutLoanLeadInput!]
  connectOrCreate: [ContractCreateOrConnectWithoutLoanLeadInput!]
  createMany: ContractCreateManyLoanLeadInputEnvelope
  connect: [ContractWhereUniqueInput!]
}

input ContractCreateWithoutLoanLeadInput {
  borrower: BorrowerCreateNestedOneWithoutContractInput!
  documents: DocumentCreateNestedManyWithoutContractInput
  dueDate: DateTime!
  signDate: DateTime!
  contractType: ContractTypeCreateNestedOneWithoutContractInput!
  employee: EmployeeCreateNestedOneWithoutContractEmployeeInput!
}

input ContractCreateOrConnectWithoutLoanLeadInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutLoanLeadInput!
}

input ContractCreateManyLoanLeadInputEnvelope {
  data: [ContractCreateManyLoanLeadInput!]!
  skipDuplicates: Boolean
}

input ContractCreateManyLoanLeadInput {
  borrowerId: String!
  dueDate: DateTime!
  signDate: DateTime!
  contractTypeId: String!
  employeeId: String!
}

input ExpensesCreateNestedManyWithoutEmployeeInput {
  create: [ExpensesCreateWithoutEmployeeInput!]
  connectOrCreate: [ExpensesCreateOrConnectWithoutEmployeeInput!]
  createMany: ExpensesCreateManyEmployeeInputEnvelope
  connect: [ExpensesWhereUniqueInput!]
}

input ExpensesCreateWithoutEmployeeInput {
  id: String
  amountToPay: Decimal!
  status: PaymentState!
  dueDate: DateTime!
  payedAt: DateTime!
  userId: String
}

input ExpensesCreateOrConnectWithoutEmployeeInput {
  where: ExpensesWhereUniqueInput!
  create: ExpensesCreateWithoutEmployeeInput!
}

input ExpensesWhereUniqueInput {
  id: String
}

input ExpensesCreateManyEmployeeInputEnvelope {
  data: [ExpensesCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input ExpensesCreateManyEmployeeInput {
  id: String
  amountToPay: Decimal!
  status: PaymentState!
  dueDate: DateTime!
  payedAt: DateTime!
  userId: String
}

input CommentCreateNestedManyWithoutCreatedByInput {
  create: [CommentCreateWithoutCreatedByInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutCreatedByInput!]
  createMany: CommentCreateManyCreatedByInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutCreatedByInput {
  id: String
  text: String!
  createdById: String!
  payment: LoanPaymentCreateNestedOneWithoutCommentsInput!
}

input LoanPaymentCreateNestedOneWithoutCommentsInput {
  create: LoanPaymentCreateWithoutCommentsInput
  connectOrCreate: LoanPaymentCreateOrConnectWithoutCommentsInput
  connect: LoanPaymentWhereUniqueInput
}

input LoanPaymentCreateWithoutCommentsInput {
  id: String
  amount: Decimal!
  profitAmount: Decimal!
  returnToCapital: Decimal!
  date: DateTime!
  percentage: Decimal!
  paymentSchedules: PaymentScheduleCreateNestedManyWithoutLoanPaymentsInput
  loan: LoanCreateNestedOneWithoutPaymentsInput!
  employee: EmployeeCreateNestedOneWithoutLoanPaymentInput!
}

input EmployeeCreateNestedOneWithoutLoanPaymentInput {
  create: EmployeeCreateWithoutLoanPaymentInput
  connectOrCreate: EmployeeCreateOrConnectWithoutLoanPaymentInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutLoanPaymentInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  user: UserCreateNestedOneWithoutEmployeeInput!
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input EmployeeCreateOrConnectWithoutLoanPaymentInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutLoanPaymentInput!
}

input EmployeeWhereUniqueInput {
  id: String
  userId: String
}

input LoanPaymentCreateOrConnectWithoutCommentsInput {
  where: LoanPaymentWhereUniqueInput!
  create: LoanPaymentCreateWithoutCommentsInput!
}

input LoanPaymentWhereUniqueInput {
  id: String
}

input CommentCreateOrConnectWithoutCreatedByInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutCreatedByInput!
}

input CommentCreateManyCreatedByInputEnvelope {
  data: [CommentCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyCreatedByInput {
  id: String
  text: String!
  createdById: String!
  loanPaymentId: String!
}

input EmployeeCreateOrConnectWithoutCommissionPaymentInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutCommissionPaymentInput!
}

input CommissionPaymentCreateOrConnectWithoutLoanInput {
  where: CommissionPaymentWhereUniqueInput!
  create: CommissionPaymentCreateWithoutLoanInput!
}

input CommissionPaymentWhereUniqueInput {
  id: String
}

input CommissionPaymentCreateManyLoanInputEnvelope {
  data: [CommissionPaymentCreateManyLoanInput!]!
  skipDuplicates: Boolean
}

input CommissionPaymentCreateManyLoanInput {
  id: String
  amount: Decimal!
  paymentScheduleId: String!
  employeeId: String!
  status: CommissionPaymentStatus!
}

input LoanCreateOrConnectWithoutPaymentsInput {
  where: LoanWhereUniqueInput!
  create: LoanCreateWithoutPaymentsInput!
}

input LoanWhereUniqueInput {
  id: String
}

input LoanPaymentCreateOrConnectWithoutPaymentSchedulesInput {
  where: LoanPaymentWhereUniqueInput!
  create: LoanPaymentCreateWithoutPaymentSchedulesInput!
}

input PaymentScheduleCreateOrConnectWithoutCommissionPaymentInput {
  where: PaymentScheduleWhereUniqueInput!
  create: PaymentScheduleCreateWithoutCommissionPaymentInput!
}

input LoanCreateNestedOneWithoutCommissionPaymentInput {
  create: LoanCreateWithoutCommissionPaymentInput
  connectOrCreate: LoanCreateOrConnectWithoutCommissionPaymentInput
  connect: LoanWhereUniqueInput
}

input LoanCreateWithoutCommissionPaymentInput {
  id: String
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal
  loanType: LoantypeCreateNestedOneWithoutLoanInput!
  signDate: DateTime
  employee: EmployeeCreateNestedOneWithoutLoanInput!
  updatedAt: DateTime
  contract: ContractCreateNestedOneWithoutLoansInput!
  paymentSchedule: PaymentScheduleCreateNestedManyWithoutLoanInput
  renovatedFromId: String
}

input LoanCreateOrConnectWithoutCommissionPaymentInput {
  where: LoanWhereUniqueInput!
  create: LoanCreateWithoutCommissionPaymentInput!
}

input CommissionPaymentCreateOrConnectWithoutEmployeeInput {
  where: CommissionPaymentWhereUniqueInput!
  create: CommissionPaymentCreateWithoutEmployeeInput!
}

input CommissionPaymentCreateManyEmployeeInputEnvelope {
  data: [CommissionPaymentCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input CommissionPaymentCreateManyEmployeeInput {
  id: String
  amount: Decimal!
  loanId: String
  paymentScheduleId: String!
  status: CommissionPaymentStatus!
}

input EmployeeCreateOrConnectWithoutLoanInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutLoanInput!
}

input LoanCreateOrConnectWithoutPaymentScheduleInput {
  where: LoanWhereUniqueInput!
  create: LoanCreateWithoutPaymentScheduleInput!
}

input PaymentScheduleCreateOrConnectWithoutLoanPaymentsInput {
  where: PaymentScheduleWhereUniqueInput!
  create: PaymentScheduleCreateWithoutLoanPaymentsInput!
}

input LoanPaymentCreateOrConnectWithoutEmployeeInput {
  where: LoanPaymentWhereUniqueInput!
  create: LoanPaymentCreateWithoutEmployeeInput!
}

input LoanPaymentCreateManyEmployeeInputEnvelope {
  data: [LoanPaymentCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input LoanPaymentCreateManyEmployeeInput {
  id: String
  amount: Decimal!
  profitAmount: Decimal!
  returnToCapital: Decimal!
  date: DateTime!
  percentage: Decimal!
  loanId: String!
}

input EmployeeCreateOrConnectWithoutContractEmployeeInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutContractEmployeeInput!
}

input ContractCreateOrConnectWithoutLoansInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutLoansInput!
}

input LoanCreateOrConnectWithoutEmployeeInput {
  where: LoanWhereUniqueInput!
  create: LoanCreateWithoutEmployeeInput!
}

input LoanCreateManyEmployeeInputEnvelope {
  data: [LoanCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input LoanCreateManyEmployeeInput {
  id: String
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal
  signDate: DateTime
  updatedAt: DateTime
  contractId: String!
  loantypeId: String!
  renovatedFromId: String
}

input EmployeeCreateOrConnectWithoutContractLoanLeadInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutContractLoanLeadInput!
}

input ContractCreateOrConnectWithoutDocumentsInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutDocumentsInput!
}

input DocumentCreateOrConnectWithoutAvalInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutAvalInput!
}

input DocumentWhereUniqueInput {
  id: String
}

input DocumentCreateManyAvalInputEnvelope {
  data: [DocumentCreateManyAvalInput!]!
  skipDuplicates: Boolean
}

input DocumentCreateManyAvalInput {
  id: String
  type: DocumentType!
  borrowerId: String
  contractId: String
  employeeId: String
}

input AvalCreateOrConnectWithoutPersonalDataInput {
  where: AvalWhereUniqueInput!
  create: AvalCreateWithoutPersonalDataInput!
}

input AvalWhereUniqueInput {
  id: String
  email: EmailAddress
}

input AvalCreateManyPersonalDataInputEnvelope {
  data: [AvalCreateManyPersonalDataInput!]!
  skipDuplicates: Boolean
}

input AvalCreateManyPersonalDataInput {
  id: String
  email: EmailAddress!
}

input PersonalDataCreateOrConnectWithoutAddressesInput {
  where: PersonalDataWhereUniqueInput!
  create: PersonalDataCreateWithoutAddressesInput!
}

input PersonalDataWhereUniqueInput {
  id: String
}

input AddressCreateOrConnectWithoutLocalInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutLocalInput!
}

input AddressWhereUniqueInput {
  id: String
}

input AddressCreateManyLocalInputEnvelope {
  data: [AddressCreateManyLocalInput!]!
  skipDuplicates: Boolean
}

input AddressCreateManyLocalInput {
  id: String
  street: String!
  exteriorNumber: String!
  interiorNumber: String!
  postalCode: String!
  locationId: String!
  personalDataId: String
}

input LocalCreateOrConnectWithoutBorrowerInput {
  where: LocalWhereUniqueInput!
  create: LocalCreateWithoutBorrowerInput!
}

input LocalWhereUniqueInput {
  id: String
}

input LocalCreateManyBorrowerInputEnvelope {
  data: [LocalCreateManyBorrowerInput!]!
  skipDuplicates: Boolean
}

input LocalCreateManyBorrowerInput {
  name: String!
}

input BorrowerCreateOrConnectWithoutPersonalDataInput {
  where: BorrowerWhereUniqueInput!
  create: BorrowerCreateWithoutPersonalDataInput!
}

input BorrowerWhereUniqueInput {
  id: String
  email: EmailAddress
}

input BorrowerCreateManyPersonalDataInputEnvelope {
  data: [BorrowerCreateManyPersonalDataInput!]!
  skipDuplicates: Boolean
}

input BorrowerCreateManyPersonalDataInput {
  email: EmailAddress
}

input PersonalDataCreateOrConnectWithoutAvalInput {
  where: PersonalDataWhereUniqueInput!
  create: PersonalDataCreateWithoutAvalInput!
}

input AvalCreateOrConnectWithoutDocumentsInput {
  where: AvalWhereUniqueInput!
  create: AvalCreateWithoutDocumentsInput!
}

input DocumentCreateOrConnectWithoutContractInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutContractInput!
}

input DocumentCreateManyContractInputEnvelope {
  data: [DocumentCreateManyContractInput!]!
  skipDuplicates: Boolean
}

input DocumentCreateManyContractInput {
  id: String
  type: DocumentType!
  borrowerId: String
  avalId: String
  employeeId: String
}

input ContractCreateOrConnectWithoutBorrowerInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutBorrowerInput!
}

input ContractCreateManyBorrowerInputEnvelope {
  data: [ContractCreateManyBorrowerInput!]!
  skipDuplicates: Boolean
}

input ContractCreateManyBorrowerInput {
  dueDate: DateTime!
  signDate: DateTime!
  contractTypeId: String!
  loanLeadId: String
  employeeId: String!
}

input BorrowerCreateOrConnectWithoutDocumentsInput {
  where: BorrowerWhereUniqueInput!
  create: BorrowerCreateWithoutDocumentsInput!
}

input DocumentCreateOrConnectWithoutEmployeeInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutEmployeeInput!
}

input DocumentCreateManyEmployeeInputEnvelope {
  data: [DocumentCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input DocumentCreateManyEmployeeInput {
  id: String
  type: DocumentType!
  borrowerId: String
  avalId: String
  contractId: String
}

input EmployeeCreateOrConnectWithoutPersonalDataInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutPersonalDataInput!
}

input EmployeeCreateManyPersonalDataInputEnvelope {
  data: [EmployeeCreateManyPersonalDataInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateManyPersonalDataInput {
  type: EmployeesTypes!
  userId: String!
}

input PersonalDataCreateOrConnectWithoutBorrowerInput {
  where: PersonalDataWhereUniqueInput!
  create: PersonalDataCreateWithoutBorrowerInput!
}

input BorrowerCreateOrConnectWithoutLocalInput {
  where: BorrowerWhereUniqueInput!
  create: BorrowerCreateWithoutLocalInput!
}

input LocalCreateOrConnectWithoutAddressesInput {
  where: LocalWhereUniqueInput!
  create: LocalCreateWithoutAddressesInput!
}

input AddressCreateOrConnectWithoutPersonalDataInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutPersonalDataInput!
}

input AddressCreateManyPersonalDataInputEnvelope {
  data: [AddressCreateManyPersonalDataInput!]!
  skipDuplicates: Boolean
}

input AddressCreateManyPersonalDataInput {
  id: String
  street: String!
  exteriorNumber: String!
  interiorNumber: String!
  postalCode: String!
  locationId: String!
  localId: String
}

input PersonalDataCreateOrConnectWithoutEmployeeInput {
  where: PersonalDataWhereUniqueInput!
  create: PersonalDataCreateWithoutEmployeeInput!
}

input EmployeeCreateOrConnectWithoutDocumentsInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutDocumentsInput!
}

input DocumentCreateOrConnectWithoutBorrowerInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutBorrowerInput!
}

input DocumentCreateManyBorrowerInputEnvelope {
  data: [DocumentCreateManyBorrowerInput!]!
  skipDuplicates: Boolean
}

input DocumentCreateManyBorrowerInput {
  id: String
  type: DocumentType!
  avalId: String
  contractId: String
  employeeId: String
}

input BorrowerCreateOrConnectWithoutContractInput {
  where: BorrowerWhereUniqueInput!
  create: BorrowerCreateWithoutContractInput!
}

input ContractCreateOrConnectWithoutContractTypeInput {
  where: ContractWhereUniqueInput!
  create: ContractCreateWithoutContractTypeInput!
}

input ContractCreateManyContractTypeInputEnvelope {
  data: [ContractCreateManyContractTypeInput!]!
  skipDuplicates: Boolean
}

input ContractCreateManyContractTypeInput {
  borrowerId: String!
  dueDate: DateTime!
  signDate: DateTime!
  loanLeadId: String
  employeeId: String!
}

input UserCreateInput {
  id: String
  email: EmailAddress!
  password: String!
  employee: EmployeeCreateNestedOneWithoutUserInput
}

input EmployeeCreateNestedOneWithoutUserInput {
  create: EmployeeCreateWithoutUserInput
  connectOrCreate: EmployeeCreateOrConnectWithoutUserInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateWithoutUserInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input EmployeeCreateOrConnectWithoutUserInput {
  where: EmployeeWhereUniqueInput!
  create: EmployeeCreateWithoutUserInput!
}

input SignInInput {
  email: String!
  password: String!
}

input BorrowerCreateInput {
  email: EmailAddress
  documents: DocumentCreateNestedManyWithoutBorrowerInput
  personalData: PersonalDataCreateNestedOneWithoutBorrowerInput!
  contract: ContractCreateNestedManyWithoutBorrowerInput
  local: LocalCreateNestedManyWithoutBorrowerInput
}

input EmployeeCreateInput {
  type: EmployeesTypes!
  documents: DocumentCreateNestedManyWithoutEmployeeInput
  user: UserCreateNestedOneWithoutEmployeeInput!
  personalData: PersonalDataCreateNestedOneWithoutEmployeeInput!
  loan: LoanCreateNestedManyWithoutEmployeeInput
  loanPayment: LoanPaymentCreateNestedManyWithoutEmployeeInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutEmployeeInput
  contractEmployee: ContractCreateNestedManyWithoutEmployeeInput
  contractLoanLead: ContractCreateNestedManyWithoutLoanLeadInput
  expenses: ExpensesCreateNestedManyWithoutEmployeeInput
  Comment: CommentCreateNestedManyWithoutCreatedByInput
}

input ContractCreateInput {
  signDate: DateTime!
  borrowerId: String!
  employeeId: String
  contractTypeId: String!
}

input CustomCreateLoanInput {
  amountGived: Decimal
  loanType: LoantypeCreateNestedOneWithoutLoanInput!
  signDate: DateTime
  employee: EmployeeCreateNestedOneWithoutLoanInput!
  updatedAt: DateTime
  contract: ContractCreateNestedOneWithoutLoansInput!
  paymentSchedule: PaymentScheduleCreateNestedManyWithoutLoanInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutLoanInput
  renovatedFromId: String
  firstPaymentDate: Date!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input LoanPaymentCreateInput {
  id: String
  amount: Decimal!
  profitAmount: Decimal!
  returnToCapital: Decimal!
  date: DateTime!
  percentage: Decimal!
  comments: CommentCreateNestedManyWithoutPaymentInput
  paymentSchedules: PaymentScheduleCreateNestedManyWithoutLoanPaymentsInput
  loan: LoanCreateNestedOneWithoutPaymentsInput!
  employee: EmployeeCreateNestedOneWithoutLoanPaymentInput!
}

input LoanPaymentUpdateInput {
  amount: Decimal!
  paidDate: DateTime!
  details: NullableStringFieldUpdateOperationsInput
  employeeId: String!
  loanId: String!
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input LoantypeCreateInput {
  id: String
  name: String!
  weekDuration: Int!
  rate: Float!
  overdueRate: Float!
  createdAt: DateTime
  updatedAt: DateTime
  loan: LoanCreateNestedManyWithoutLoanTypeInput
  comissionPaymentConfiguration: ComissionPaymentConfigurationCreateNestedManyWithoutLoanTypeInput
}

input LoanCreateNestedManyWithoutLoanTypeInput {
  create: [LoanCreateWithoutLoanTypeInput!]
  connectOrCreate: [LoanCreateOrConnectWithoutLoanTypeInput!]
  createMany: LoanCreateManyLoanTypeInputEnvelope
  connect: [LoanWhereUniqueInput!]
}

input LoanCreateWithoutLoanTypeInput {
  id: String
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal
  signDate: DateTime
  employee: EmployeeCreateNestedOneWithoutLoanInput!
  updatedAt: DateTime
  contract: ContractCreateNestedOneWithoutLoansInput!
  paymentSchedule: PaymentScheduleCreateNestedManyWithoutLoanInput
  commissionPayment: CommissionPaymentCreateNestedManyWithoutLoanInput
  renovatedFromId: String
}

input LoanCreateOrConnectWithoutLoanTypeInput {
  where: LoanWhereUniqueInput!
  create: LoanCreateWithoutLoanTypeInput!
}

input LoanCreateManyLoanTypeInputEnvelope {
  data: [LoanCreateManyLoanTypeInput!]!
  skipDuplicates: Boolean
}

input LoanCreateManyLoanTypeInput {
  id: String
  weeklyPaymentAmount: Decimal!
  amountGived: Decimal
  signDate: DateTime
  updatedAt: DateTime
  contractId: String!
  employeeId: String!
  renovatedFromId: String
}

input PhoneCreateInput {
  number: String!
  avalId: String
  employeeId: String
  personalData: PersonalDataCreateNestedOneWithoutPhonesInput
}

input PersonalDataCreateNestedOneWithoutPhonesInput {
  create: PersonalDataCreateWithoutPhonesInput
  connectOrCreate: PersonalDataCreateOrConnectWithoutPhonesInput
  connect: PersonalDataWhereUniqueInput
}

input PersonalDataCreateWithoutPhonesInput {
  id: String
  fullName: String!
  firstName: String!
  lastName: String!
  addresses: AddressCreateNestedManyWithoutPersonalDataInput
  employee: EmployeeCreateNestedManyWithoutPersonalDataInput
  aval: AvalCreateNestedManyWithoutPersonalDataInput
  borrower: BorrowerCreateNestedManyWithoutPersonalDataInput
}

input PersonalDataCreateOrConnectWithoutPhonesInput {
  where: PersonalDataWhereUniqueInput!
  create: PersonalDataCreateWithoutPhonesInput!
}

input LocalCreateInput {
  name: String!
  addresses: AddressCreateNestedManyWithoutLocalInput
  borrower: BorrowerCreateNestedOneWithoutLocalInput!
}
