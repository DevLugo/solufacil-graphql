# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Employee {
  id: ID!
  userId: ID
  type: EmployeesTypes
  routes: [Route!]!
  personalData: PersonalData!
  user: User!
}

enum EmployeesTypes {
  LIAISON_EXECUTIVE
  LOAN_LEAD
}

type User {
  id: ID!
  employeeId: ID
  employee: Employee!
  email: String!
  password: String!
  lastLogin: DateTime
  profilePicture: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type SignInOutput {
  token: String!
  user: User!
}

type Phone {
  id: ID!
  number: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Address {
  id: ID!
  street: String!
  exteriorNumber: String
  interiorNumber: String!
  postalCode: String!
  references: String
  locationId: ID!
  location: Location!
}

type PersonalData {
  id: ID!
  curp: String!
  fullName: String!
  firstName: String!
  lastName: String!
  birthDate: Date!
  createdAt: DateTime!
  updatedAt: DateTime!
  phones: [Phone!]!
  addresses: [Address!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Borrower {
  id: ID!
  email: String
  createdAt: DateTime!
  updatedAt: DateTime!
  loanFinishedCount: Int!
  personalDataId: String!
  activeLoan: Loan!
  personalData: PersonalData!
}

type Loan {
  id: ID!
  status: LoanState!
  weeklyPaymentAmount: Decimal!
  previousAmountGived: Decimal
  amountGived: Decimal!
  amountToPay: Decimal!
  paidAmount: Decimal!
  pendingAmount: Decimal!
  renovationProfitAmount: Decimal!
  renovationPendingAmount: Decimal!
  baseProfitAmount: Decimal!
  totalProfitAmount: Decimal!
  loanTypeId: ID!
  signDate: DateTime!
  finishedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  contractId: String!
  grantorId: String!
  renovatedFromId: String
  paymentsSchedules: [PaymentSchedule!]!
  avals: [PersonalData!]!
  grantor: Employee!
  contract: Contract!
  payments: [LoanPayment!]!
}

enum LoanState {
  REQUESTED
  IN_REVIEW
  APPROVED
  REJECTED
  PAID_OUT
  POSTPONED
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type Route {
  id: ID!
  name: String!
  locations: [Location!]!
}

type LoanType {
  id: ID!
  name: String!
  weekDuration: Int!
  rate: Float!
  weeksToRenew: Int!
  overdueRate: Float!
  initialAmount: Float!
  maximunAmount: Float!
  amountToIncrease: Float!
  increaseEveryNLoans: Int!
  availableFor: [EmployeesTypes!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaymentSchedule {
  id: ID!
  numeration: Int!
  amountToPay: Decimal!
  paidAmount: Decimal!
  returnToCapital: Decimal!
  profit: Decimal!
  status: PaymentState!
  delayed: Boolean!
  dueDate: DateTime!
  details: String
  createdAt: DateTime!
  updatedAt: DateTime!
  loanId: String!
  pendingAmount: Decimal!
  borrower: Borrower!
}

enum PaymentState {
  PENDING
  PAID_OUT
  PARTIALLY_PAID
}

type Contract {
  id: ID!
  borrowerId: ID!
  contractTypeId: ID!
  loanLeadId: ID!
  grantorId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  signDate: DateTime!
}

type LoanPayment {
  id: ID!
  amount: Decimal!
  percentage: Decimal!
  loanId: String!
  collectorId: String!
  leadPaymentReceivedId: String!
  profitAmount: Decimal!
  returnToCapital: Decimal!
  createdAt: DateTime!
  updatedAt: DateTime!
  comments: [Comment!]!
}

type Location {
  id: ID!
  name: String!
  municipalityId: ID!
  stateId: ID!
  leads: [Employee!]!
  municipality: Municipality!
  state: State
}

type State {
  id: ID!
  name: String!
}

type Municipality {
  id: ID!
  name: String!
  stateId: ID!
}

type Comment {
  id: ID!
  employeeId: ID!
  loanPaymentId: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  hello: String!
  getLoanByBorrower(where: LoanByBorrowerWhereUniqueInput!): Loan!
  getRoutes(where: RouteWhereInput!): [Route!]!
  locations(where: LocationWhereInput!): [Location!]!
  getEmployee(where: EmployeeWhereUniqueInput!): Employee!
  getBorrower(where: BorrowerWhereUniqueInput!): Borrower!
  getBorrowers(where: BorrowerWhereInput): [Borrower!]!
  getLoanTypes(where: LoanTypeWhereInput): [LoanType!]!
  getPaymentSchedules(where: PaymentScheduleWhereInput): [PaymentSchedule!]!
}

input LoanByBorrowerWhereUniqueInput {
  borrowerId: String!
}

input RouteWhereInput {
  name: String
}

input LocationWhereInput {
  routeId: ID!
  name: String
}

input EmployeeWhereUniqueInput {
  id: ID!
}

input BorrowerWhereUniqueInput {
  id: ID
}

input BorrowerWhereInput {
  locationId: ID
  leadId: ID
}

input LoanTypeWhereInput {
  employeeType: EmployeesTypes
}

input PaymentScheduleWhereInput {
  leadId: String
  dueDate: DateTime
  paymentState: [PaymentState!]
}

type Mutation {
  payPayment(input: PayLoanPaymentInput!): Loan!
  createLoan(input: LoanCreateInput!): Loan!
  createLoanBulk(input: [LoanCreateInput!]!): [Loan!]!
  signUp(input: UserCreateInput!): User!
  signIn(input: SignInInput!): SignInOutput!
}

input PayLoanPaymentInput {
  amount: Decimal!
  paidDate: DateTime!
  loanId: String!
}

input LoanCreateInput {
  firstPaymentDate: Date!
  isRenovation: Boolean!
  borrowerId: String
  borrower: BorrowerCreateInput
  avals: [CreatePersonalDataInput!]
  loanLeadId: String!
  amountGived: Decimal!
  loanTypeId: String!
  signDate: Date
}

input BorrowerCreateInput {
  email: String
  personalData: CreatePersonalDataInput!
}

input CreatePersonalDataInput {
  curp: String!
  firstName: String!
  lastName: String!
  phones: [CreatePhoneInput!]!
  adresses: [CreateAddressInput!]!
}

input CreatePhoneInput {
  number: String!
}

input CreateAddressInput {
  street: String!
  exteriorNumber: String
  interiorNumber: String!
  postalCode: String!
  references: String
}

input UserCreateInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input SignInInput {
  email: String!
  password: String!
}