
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.8.1
 * Query Engine version: 34df67547cf5598f5a6cd3eb45f14ee70c3fb86f
 */
Prisma.prismaVersion = {
  client: "3.8.1",
  engine: "34df67547cf5598f5a6cd3eb45f14ee70c3fb86f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.LogScalarFieldEnum = makeEnum({
  id: 'id',
  requestBody: 'requestBody',
  requestType: 'requestType',
  deviceType: 'deviceType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  systemSectionId: 'systemSectionId'
});

exports.Prisma.SystemSectionScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  lastLogin: 'lastLogin',
  profilePicture: 'profilePicture',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.EmployeeScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
});

exports.Prisma.DocumentScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  borrowerId: 'borrowerId',
  avalId: 'avalId',
  contractId: 'contractId',
  employeeId: 'employeeId'
});

exports.Prisma.CustomerScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  logo: 'logo',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AvalScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  fullName: 'fullName',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.BorrowerScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  address: 'address',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.LocalScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  borrowerId: 'borrowerId'
});

exports.Prisma.PhoneScalarFieldEnum = makeEnum({
  id: 'id',
  number: 'number',
  borrowerId: 'borrowerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avalId: 'avalId',
  employeeId: 'employeeId'
});

exports.Prisma.ContractTypeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  monthDuration: 'monthDuration',
  amount: 'amount',
  maxRate: 'maxRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.LoantypeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  weekDuration: 'weekDuration',
  rate: 'rate',
  overdueRate: 'overdueRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ContractScalarFieldEnum = makeEnum({
  id: 'id',
  borrowerId: 'borrowerId',
  createdAt: 'createdAt',
  dueDate: 'dueDate',
  signDate: 'signDate',
  updatedAt: 'updatedAt',
  employeeId: 'employeeId',
  contractTypeId: 'contractTypeId'
});

exports.Prisma.LoanScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status',
  weeklyPaymentAmount: 'weeklyPaymentAmount',
  amountToPay: 'amountToPay',
  signDate: 'signDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contractId: 'contractId',
  loantypeId: 'loantypeId',
  employeeId: 'employeeId'
});

exports.Prisma.LoanPaymentScalarFieldEnum = makeEnum({
  id: 'id',
  amount: 'amount',
  date: 'date',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  loanId: 'loanId',
  employeeId: 'employeeId'
});

exports.Prisma.PaymentScheduleScalarFieldEnum = makeEnum({
  id: 'id',
  numeration: 'numeration',
  amountToPay: 'amountToPay',
  paidAmount: 'paidAmount',
  returnToCapital: 'returnToCapital',
  profit: 'profit',
  status: 'status',
  delayed: 'delayed',
  dueDate: 'dueDate',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  loanId: 'loanId'
});

exports.Prisma.ExpensesScalarFieldEnum = makeEnum({
  id: 'id',
  amountToPay: 'amountToPay',
  status: 'status',
  dueDate: 'dueDate',
  payedAt: 'payedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.EmployeesTypes = makeEnum({
  EJECUTIVO_DE_ENLACE: 'EJECUTIVO_DE_ENLACE'
});

exports.DocumentType = makeEnum({
  DNI: 'DNI',
  NSS: 'NSS',
  RFC: 'RFC',
  SHOP_PHOTO: 'SHOP_PHOTO',
  BANC_ACCOUNT: 'BANC_ACCOUNT',
  ADDRESS_PROFF: 'ADDRESS_PROFF',
  CREDIT_BUREAU: 'CREDIT_BUREAU',
  DRIVER_LICENCE: 'DRIVER_LICENCE',
  JOB_APPLICATION: 'JOB_APPLICATION',
  CONTRACT_EVIDENCE: 'CONTRACT_EVIDENCE',
  LETTER_NO_CRIMINAL_RECORD: 'LETTER_NO_CRIMINAL_RECORD'
});

exports.LoanState = makeEnum({
  REQUESTED: 'REQUESTED',
  IN_REVIEW: 'IN_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PAID_OUT: 'PAID_OUT',
  POSTPONED: 'POSTPONED'
});

exports.PaymentState = makeEnum({
  PENDING: 'PENDING',
  PAID_OUT: 'PAID_OUT',
  PARTIALLY_PAID: 'PARTIALLY_PAID'
});

exports.Prisma.ModelName = makeEnum({
  Log: 'Log',
  SystemSection: 'SystemSection',
  User: 'User',
  Employee: 'Employee',
  Document: 'Document',
  Customer: 'Customer',
  Aval: 'Aval',
  Borrower: 'Borrower',
  Local: 'Local',
  Phone: 'Phone',
  ContractType: 'ContractType',
  Loantype: 'Loantype',
  Contract: 'Contract',
  Loan: 'Loan',
  LoanPayment: 'LoanPayment',
  PaymentSchedule: 'PaymentSchedule',
  Expenses: 'Expenses'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
